[
  {
    "objectID": "HousePrices.html",
    "href": "HousePrices.html",
    "title": "Prediction of House Prices in Ames",
    "section": "",
    "text": "Houses\n\n\n\n\n\n\n\nLocation\n\n\n\n\nFigure 1: Ames, Iowa - USA."
  },
  {
    "objectID": "HousePrices.html#margin-figures",
    "href": "HousePrices.html#margin-figures",
    "title": "Prediction of House Prices in Ames",
    "section": "Margin Figures",
    "text": "Margin Figures\nImages and graphics play an integral role in Tufte’s work. To place figures in the margin you can use the Quarto chunk option column: margin. For example:\n\n\nCode\n```{r}\n#| label: fig-margin\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\n#| message: false\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() + geom_smooth() +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\n\nFigure 2: MPG vs horsepower, colored by transmission.\n\n\n\nNote the use of the fig-cap chunk option to provide a figure caption. You can adjust the proportions of figures using the fig-width and fig-height chunk options. These are specified in inches, and will be automatically scaled down to fit within the handout margin."
  },
  {
    "objectID": "HousePrices.html#arbitrary-margin-content",
    "href": "HousePrices.html#arbitrary-margin-content",
    "title": "Prediction of House Prices in Ames",
    "section": "Arbitrary Margin Content",
    "text": "Arbitrary Margin Content\nYou can include anything in the margin by places the class .column-margin on the element. See an example on the right about the first fundamental theorem of calculus.\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]"
  },
  {
    "objectID": "HousePrices.html#full-width-figures",
    "href": "HousePrices.html#full-width-figures",
    "title": "Prediction of House Prices in Ames",
    "section": "Full Width Figures",
    "text": "Full Width Figures\nYou can arrange for figures to span across the entire page by using the chunk option fig-column: page-right.\n\n\nCode\n```{r}\n#| label: fig-fullwidth\n#| fig-cap: \"A full width figure.\"\n#| fig-width: 11\n#| fig-height: 3\n#| fig-column: page-right\n#| warning: false\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\n\n\n\n\n\nFigure 3: A full width figure.\n\n\n\n\nOther chunk options related to figures can still be used, such as fig-width, fig-cap, and so on. For full width figures, usually fig-width is large and fig-height is small. In the above example, the plot size is \\(11 \\times 3\\)."
  },
  {
    "objectID": "HousePrices.html#arbitrary-full-width-content",
    "href": "HousePrices.html#arbitrary-full-width-content",
    "title": "Prediction of House Prices in Ames",
    "section": "Arbitrary Full Width Content",
    "text": "Arbitrary Full Width Content\nAny content can span to the full width of the page, simply place the element in a div and add the class column-page-right. For example, the following code will display its contents as full width.\n::: {.fullwidth}\nAny _full width_ content here.\n:::\nBelow is an example:\n\nR is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see https://www.gnu.org/licenses/."
  },
  {
    "objectID": "HousePrices.html#main-column-figures",
    "href": "HousePrices.html#main-column-figures",
    "title": "Prediction of House Prices in Ames",
    "section": "Main Column Figures",
    "text": "Main Column Figures\nBesides margin and full width figures, you can of course also include figures constrained to the main column. This is the default type of figures in the LaTeX/HTML output.\n\n\nCode\n```{r}\n#| label: fig-main\n#| fig-cap: \"A figure in the main column.\"\nggplot(diamonds, aes(cut, price)) + geom_boxplot()\n```\n\n\n\n\n\nFigure 4: A figure in the main column."
  },
  {
    "objectID": "HousePrices.html#margin-captions",
    "href": "HousePrices.html#margin-captions",
    "title": "Prediction of House Prices in Ames",
    "section": "Margin Captions",
    "text": "Margin Captions\nWhen you include a figure constrained to the main column, you can choose to place the figure’s caption in the margin by using the cap-location chunk option. For example:\n\n\nCode\n```{r}\n#| label: fig-main-margin-cap\n#| fig-cap: \"A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Captions can even contain elements like a citation such as @R-base.\"\n#| cap-location: margin\nggplot(diamonds, aes(cut, price)) + geom_boxplot()\n```\n\n\n\n\n\nFigure 5: A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Captions can even contain elements like a citation such as R Core Team (2023)."
  },
  {
    "objectID": "Tufte_template_instructions.html",
    "href": "Tufte_template_instructions.html",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "",
    "text": "This document demonstrates the use of a number of advanced page layout features to produce an attractive and usable document inspired by the Tufte handout style and the use of Tufte’s styles in RMarkdown documents. The Tufte handout style is a style that Edward Tufte uses in his books and handouts. Tufte’s style is known for its extensive use of sidenotes, tight integration of graphics with text, and well-set typography. Quarto1 supports most of the layout techniques that are used in the Tufte handout style for both HTML and LaTeX/PDF output.1 To learn more, you can read more about Quarto or visit Quarto’s Github repository.\n---\ntitle: \"An Example Using the Tufte Style\"\nauthor: \"John Smith\"\nformat:\n  html:\n    grid:\n1      margin-width: 350px\n  pdf: default\n2reference-location: margin\ncitation-location: margin\n---\n\n1\n\nIncreases the width of the margin to make more room for sidenotes and margin figures (HTML only).\n\n2\n\nPlaces footnotes and cited sources in the margin. Other layout options (for example placing a figure in the margin) will be set per element in examples below.\n\n\nThese layout features are designed with two important goals in mind:\n\nTo produce both PDF and HTML output with similar styles from the same Quarto document;\nTo provide simple syntax to write elements of the Tufte style such as side notes and margin figures. If you’d like a figure placed in the margin, just set the option fig-column: margin for your code chunk, and we will take care of the details for you2.\n\n2 You never need to think about \\begin{marginfigure} or &lt;span class=\"marginfigure\"&gt;; the LaTeX and HTML code under the hood may be complicated, but you never need to learn or write such code.If you have any feature requests or find bugs in these capabilities, please do not hesitate to file them to https://github.com/quarto-dev/quarto-cli/issues."
  },
  {
    "objectID": "Tufte_template_instructions.html#margin-figures",
    "href": "Tufte_template_instructions.html#margin-figures",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "Margin Figures",
    "text": "Margin Figures\nImages and graphics play an integral role in Tufte’s work. To place figures in the margin you can use the Quarto chunk option column: margin. For example:\n\n\nCode\n```{r}\n#| label: fig-margin\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\n#| message: false\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() + geom_smooth() +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\n\nFigure 1: MPG vs horsepower, colored by transmission.\n\n\n\nNote the use of the fig-cap chunk option to provide a figure caption. You can adjust the proportions of figures using the fig-width and fig-height chunk options. These are specified in inches, and will be automatically scaled down to fit within the handout margin."
  },
  {
    "objectID": "Tufte_template_instructions.html#arbitrary-margin-content",
    "href": "Tufte_template_instructions.html#arbitrary-margin-content",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "Arbitrary Margin Content",
    "text": "Arbitrary Margin Content\nYou can include anything in the margin by places the class .column-margin on the element. See an example on the right about the first fundamental theorem of calculus.\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]"
  },
  {
    "objectID": "Tufte_template_instructions.html#full-width-figures",
    "href": "Tufte_template_instructions.html#full-width-figures",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "Full Width Figures",
    "text": "Full Width Figures\nYou can arrange for figures to span across the entire page by using the chunk option fig-column: page-right.\n\n\nCode\n```{r}\n#| label: fig-fullwidth\n#| fig-cap: \"A full width figure.\"\n#| fig-width: 11\n#| fig-height: 3\n#| fig-column: page-right\n#| warning: false\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\n\n\n\n\n\nFigure 2: A full width figure.\n\n\n\n\nOther chunk options related to figures can still be used, such as fig-width, fig-cap, and so on. For full width figures, usually fig-width is large and fig-height is small. In the above example, the plot size is \\(11 \\times 3\\)."
  },
  {
    "objectID": "Tufte_template_instructions.html#arbitrary-full-width-content",
    "href": "Tufte_template_instructions.html#arbitrary-full-width-content",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "Arbitrary Full Width Content",
    "text": "Arbitrary Full Width Content\nAny content can span to the full width of the page, simply place the element in a div and add the class column-page-right. For example, the following code will display its contents as full width.\n::: {.fullwidth}\nAny _full width_ content here.\n:::\nBelow is an example:\n\nR is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see https://www.gnu.org/licenses/."
  },
  {
    "objectID": "Tufte_template_instructions.html#main-column-figures",
    "href": "Tufte_template_instructions.html#main-column-figures",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "Main Column Figures",
    "text": "Main Column Figures\nBesides margin and full width figures, you can of course also include figures constrained to the main column. This is the default type of figures in the LaTeX/HTML output.\n\n\nCode\n```{r}\n#| label: fig-main\n#| fig-cap: \"A figure in the main column.\"\nggplot(diamonds, aes(cut, price)) + geom_boxplot()\n```\n\n\n\n\n\nFigure 3: A figure in the main column."
  },
  {
    "objectID": "Tufte_template_instructions.html#margin-captions",
    "href": "Tufte_template_instructions.html#margin-captions",
    "title": "Prediction of House Prices in Ames, Iowa",
    "section": "Margin Captions",
    "text": "Margin Captions\nWhen you include a figure constrained to the main column, you can choose to place the figure’s caption in the margin by using the cap-location chunk option. For example:\n\n\nCode\n```{r}\n#| label: fig-main-margin-cap\n#| fig-cap: \"A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Captions can even contain elements like a citation such as @R-base.\"\n#| cap-location: margin\nggplot(diamonds, aes(cut, price)) + geom_boxplot()\n```\n\n\n\n\n\nFigure 4: A figure with a longer caption. The figure appears in the main column, but the caption is placed in the margin. Captions can even contain elements like a citation such as R Core Team (2023)."
  },
  {
    "objectID": "HousePrices.html#missing-values",
    "href": "HousePrices.html#missing-values",
    "title": "Prediction of House Prices in Ames",
    "section": "Missing Values",
    "text": "Missing Values\nFirst things first, read the full data description1. The manifest is available here. There you’ll find that for several columns missing values NA means actually “None”. The physical absence of a determined feature in a house is a category exposing the lack of such quality that can have a significant impact on the Sale Price (response).1 Tip: print a copy, make notes and study it. This is the first step to get into domain knowledge for Feature Engineering in the modelling phase.\nTherefore, I will fill the empty NA fields of the indicated columns of both datasets with the string “None”.\n\n\nCode\n```{r}\n#| label: easy replace_na\n\ncols_NA_to_none &lt;- list(\n  Alley = \"None\",\n  BsmtQual = \"None\", BsmtCond = \"None\", BsmtExposure = \"None\", BsmtFinType1 = \"None\", BsmtFinType2 = \"None\", \n  FireplaceQu = \"None\", \n  GarageType = \"None\", GarageFinish = \"None\", GarageQual = \"None\", GarageCond = \"None\", \n  PoolQC = \"None\",\n  Fence = \"None\", \n  MiscFeature = \"None\")\n\ndf_all &lt;- df_all |&gt;\n  replace_na(cols_NA_to_none) \n  \ndf_sub &lt;- df_sub |&gt;\n  replace_na(cols_NA_to_none)\n```\n\n\nOne of the early and recurrent steps of the EDA is to check the completeness of data. Let’s search for missing values, after filling indicated fields2. For this case I wrote the function count_na() that generates the tables displayed on the right margin.2 Tip: write a function to quantify missing values depending on the language and labelling system used.\n\n```{r}\n#| label: Counting NAs\n#| code-fold: false\n#| column: margin\n\ndf_all |&gt; \n  count_na() |&gt;  \n  knitr::kable(caption = 'Training dataset')\n\ndf_sub |&gt; \n  count_na() |&gt;  \n  knitr::kable(caption = 'Submission dataset')  \n```\n\n\n\nTraining dataset\n\n\nVariable\nNA_count\nPercent\n\n\n\n\nLotFrontage\n259\n17.74\n\n\nGarageYrBlt\n81\n5.55\n\n\nMasVnrType\n8\n0.55\n\n\nMasVnrArea\n8\n0.55\n\n\nElectrical\n1\n0.07\n\n\n\n\nSubmission dataset\n\n\nVariable\nNA_count\nPercent\n\n\n\n\nLotFrontage\n227\n15.56\n\n\nGarageYrBlt\n78\n5.35\n\n\nMasVnrType\n16\n1.10\n\n\nMasVnrArea\n15\n1.03\n\n\nMSZoning\n4\n0.27\n\n\nUtilities\n2\n0.14\n\n\nBsmtFullBath\n2\n0.14\n\n\nBsmtHalfBath\n2\n0.14\n\n\nFunctional\n2\n0.14\n\n\nExterior1st\n1\n0.07\n\n\nExterior2nd\n1\n0.07\n\n\nBsmtFinSF1\n1\n0.07\n\n\nBsmtFinSF2\n1\n0.07\n\n\nBsmtUnfSF\n1\n0.07\n\n\nTotalBsmtSF\n1\n0.07\n\n\nKitchenQual\n1\n0.07\n\n\nGarageCars\n1\n0.07\n\n\nGarageArea\n1\n0.07\n\n\nSaleType\n1\n0.07\n\n\n\n\nI will fill the remaining missing values as follow:\n\nThe LotFrontage column refers to the linear feet of street connected to the house. This feature is not well documented and the missing percentage related to other variables makes it unreliable, therefore, I will delete the feature.\nEverytime there is no garage, i.e., GarageType = \"None\", there is the corresponding missing value in Garage Year Built GarageYrBlt = NA. I will engineer a new feature called GarageNew with three ordinal categories: None, No, Yes. This based on the delta of YearBuilt - GarageYrBlt; I expect that given the house price, the algorithm will learn that “None” is worse than “No” and so on. Then I will remove the GarageYrBlt predictor.\nFor the rest of variables with a 1 % or less NA, I’ll calculate the median (if numerical) and the mode (if categorical) in order to fill them with it.\n\nHere’s my pipeline for both datasets:\n\n\nCode\n```{r}\n#| label: terminating NAs\n\n# \"replace_na_with_median\" is a custom function\n\ndf_all &lt;- df_all |&gt;\n  mutate(LotFrontage = NULL) |&gt;\n  mutate(GarageNew = if_else(YearBuilt - GarageYrBlt &gt; 0, \"Yes\", \"No\")) |&gt;\n  replace_na(list(GarageNew = \"None\")) |&gt;\n  mutate(GarageNew = factor(GarageNew, levels = c(\"None\", \"No\", \"Yes\"))) |&gt;\n  mutate(GarageYrBlt = NULL) |&gt;\n  mutate_if(is.numeric, replace_na_with_median)\n\ndf_sub &lt;- df_sub |&gt;\n  mutate(LotFrontage = NULL) |&gt;\n  mutate(GarageNew = if_else(YearBuilt - GarageYrBlt &gt; 0, \"Yes\", \"No\")) |&gt;\n  replace_na(list(GarageNew = \"None\")) |&gt;\n  mutate(GarageNew = factor(GarageNew, levels = c(\"None\", \"No\", \"Yes\"))) |&gt;\n  mutate(GarageYrBlt = NULL) |&gt;\n  mutate_if(is.numeric, replace_na_with_median)\n```\n\n\nLet’s get a list with the mode of each remaining columns containing missing values NA.\n\n\nCode\n```{r}\n#| label: Mode for NAs\n\n# Get the mode for reamaining columns with NAs:\n\n# Good and old-fashion code: apply(df_all, 2, find_mode)\n\nls_na_mode_all &lt;- df_all |&gt;\n  select(MasVnrType, MasVnrArea, Electrical) |&gt;\n  map(find_mode)\n\nls_na_mode_sub &lt;- df_sub |&gt; \n  select(MasVnrType, MasVnrArea, MSZoning, Utilities,   BsmtFullBath,   BsmtHalfBath,   Functional, Exterior1st,    Exterior2nd,    BsmtFinSF1, BsmtFinSF2, BsmtUnfSF,  TotalBsmtSF,    KitchenQual,    GarageCars, GarageArea, SaleType) |&gt;\n  map(find_mode)\n\n# Replace with the created named-lists\ndf_all &lt;- df_all |&gt;\n  replace_na(ls_na_mode_all) \n  \ndf_sub &lt;- df_sub |&gt;\n  replace_na(ls_na_mode_sub)\n\n# Check for last time for missing values:\nprint(\"Training dataset\")\ndf_all |&gt;\n  count_na()\n\nprint(\"Submission dataset\")\ndf_sub |&gt;\n  count_na()\n```\n\n\n[1] \"Training dataset\"\n[1] \"No missing values (NA) found.\"\n[1] \"Submission dataset\"\n[1] \"No missing values (NA) found.\"\n\n\n“The data is complete!” Let’s think about predictors."
  },
  {
    "objectID": "HousePrices.html#extract-data",
    "href": "HousePrices.html#extract-data",
    "title": "Prediction of House Prices in Ames",
    "section": "Extract Data",
    "text": "Extract Data\nI checked beforehands that there are no missing values, here NA, in the target variable SalePrice. Therefore, I will write a pipeline to read and concatenate both datasets, adding and extra column dataset to label as “train” and “test” for further easy splitting1 (subset or filter).1 Tip: The whole Feature Transformation pipeline most be always the same for all, old and new predictors.\n\n\nCode\n```{r}\n#| label: Load Data\n#| warning: false\n\names_train_raw &lt;- read_csv(\"./data/raw/train.csv\") # Train, validattion and test dataset\nprint(\"Dimensions of training dataset\")\ndim(ames_train_raw)\n\names_test_raw &lt;- read_csv(\"./data/raw/test.csv\")  # Features for submission dataset\nprint(\"Dimensions of test dataset containing only Feats.\")\ndim(ames_test_raw) \n\n# Add Target column with NA so both DFs can be concatenated:.id\names_test_raw &lt;- ames_test_raw |&gt; mutate(SalePrice = NA)\n\n# Binding and adding identifier column \"dataset\" \names_all &lt;- bind_rows(list(train = ames_train_raw, test = ames_test_raw), .id = \"dataset\")\n\nprint(\"Available variables:\")\nnames(ames_all)\n```\n\n\n[1] \"Dimensions of training dataset\"\n[1] 1460   81\n[1] \"Dimensions of test dataset containing only Feats.\"\n[1] 1459   80\n[1] \"Available variables:\"\n [1] \"dataset\"       \"Id\"            \"MSSubClass\"    \"MSZoning\"     \n [5] \"LotFrontage\"   \"LotArea\"       \"Street\"        \"Alley\"        \n [9] \"LotShape\"      \"LandContour\"   \"Utilities\"     \"LotConfig\"    \n[13] \"LandSlope\"     \"Neighborhood\"  \"Condition1\"    \"Condition2\"   \n[17] \"BldgType\"      \"HouseStyle\"    \"OverallQual\"   \"OverallCond\"  \n[21] \"YearBuilt\"     \"YearRemodAdd\"  \"RoofStyle\"     \"RoofMatl\"     \n[25] \"Exterior1st\"   \"Exterior2nd\"   \"MasVnrType\"    \"MasVnrArea\"   \n[29] \"ExterQual\"     \"ExterCond\"     \"Foundation\"    \"BsmtQual\"     \n[33] \"BsmtCond\"      \"BsmtExposure\"  \"BsmtFinType1\"  \"BsmtFinSF1\"   \n[37] \"BsmtFinType2\"  \"BsmtFinSF2\"    \"BsmtUnfSF\"     \"TotalBsmtSF\"  \n[41] \"Heating\"       \"HeatingQC\"     \"CentralAir\"    \"Electrical\"   \n[45] \"1stFlrSF\"      \"2ndFlrSF\"      \"LowQualFinSF\"  \"GrLivArea\"    \n[49] \"BsmtFullBath\"  \"BsmtHalfBath\"  \"FullBath\"      \"HalfBath\"     \n[53] \"BedroomAbvGr\"  \"KitchenAbvGr\"  \"KitchenQual\"   \"TotRmsAbvGrd\" \n[57] \"Functional\"    \"Fireplaces\"    \"FireplaceQu\"   \"GarageType\"   \n[61] \"GarageYrBlt\"   \"GarageFinish\"  \"GarageCars\"    \"GarageArea\"   \n[65] \"GarageQual\"    \"GarageCond\"    \"PavedDrive\"    \"WoodDeckSF\"   \n[69] \"OpenPorchSF\"   \"EnclosedPorch\" \"3SsnPorch\"     \"ScreenPorch\"  \n[73] \"PoolArea\"      \"PoolQC\"        \"Fence\"         \"MiscFeature\"  \n[77] \"MiscVal\"       \"MoSold\"        \"YrSold\"        \"SaleType\"     \n[81] \"SaleCondition\" \"SalePrice\"    \n\n\n[comment]: &lt;&gt; In order to organise my Data Budget I count on 1460 Observations of 79 predictors (one column is only an Id per house) and the Response, which is the SalePrice of the houses at the end of the list above.\nNote that Id and the just added dataset columns are not predictors. Hence, there are 79 features to play with. Also rememeber that the number of features for modelling will vary. Some will be discarded and some will be created along the analysis.\nI’ll get rid of the Id column:\n\n\nCode\n```{r}\n#| label: Remove Id\n\names_all$Id &lt;- NULL\n```"
  },
  {
    "objectID": "HousePrices.html#feature-engineering",
    "href": "HousePrices.html#feature-engineering",
    "title": "Prediction of House Prices in Ames",
    "section": "Feature Engineering",
    "text": "Feature Engineering\nI have already started with the creation of a new predictor in the previous step, this to substitute the problematic variable GarageYrBlt that had a lot of missing values.\nData Science is not sequential, i.e., this is not the only step where Feature Engineering is applied. Think about the next modelling phase, where you want to reduce features, e.g., where new Principal Components are the new aggregators of original features.\nIn this part I will establish which variables are categorical and numerical; this is not always as obvious as it seems4.4 Tip: integer variables like calendar Years can be treated as categories for the analysis.\nThe first easy thing that comes to mind is to add the total area of the property as a new column named TotalAreaSF; SF means Squared Feet.\nAfter that, I check the data documentation to see which variables can be thought as categoricals (factors) or Boolean; this can be tedeous if Real Estate is not your domain of expertise.\n\n\nCode\n```{r}\n#| label: Feature Engineering\n\n# --- Aggregable Count (Numerical) Features: \names_all &lt;- ames_all |&gt;\n\n  # NEW TotalBaths:\n  mutate(TotalBaths = BsmtFullBath + 0.5 * BsmtHalfBath + FullBath + 0.5 * HalfBath) |&gt; \n  select(-c(BsmtFullBath, BsmtHalfBath, FullBath, HalfBath)) |&gt; # Bye bye...\n\n  # NEW TotalInteriorArea:\n  mutate(TotalInteriorArea = BsmtFinSF1 + BsmtFinSF2 + `1stFlrSF` + `2ndFlrSF`) |&gt;\n  select(-c(BsmtFinSF1, BsmtFinSF2, `1stFlrSF`))|&gt; # Bye bye...\n\n  # NEW TotalExteriorArea:\n  mutate(TotalExteriorArea = WoodDeckSF + OpenPorchSF + EnclosedPorch + `3SsnPorch` + ScreenPorch) |&gt;\n  select(-c(WoodDeckSF, OpenPorchSF, EnclosedPorch, `3SsnPorch`, ScreenPorch)) # Bye bye...\n\n\names_all$LowQualFinSF &lt;- NULL  # Most is 0, almost 0 variance. Low quality finished square feet (all floors)\n\n# ToDo: Check rest of Cats.\n\n# ames_all &lt;- ames_all |&gt;  \n#   as_factor(MSSubClass, MSZonin, Street, Alley, LotShape, LandContour, Utilities, LotConfig, LandSlope, Neighborhood, \n#   Condition1, Condition2, BldgType, HouseStyle,   \n#   YearBuilt, RoofStyle, RoofMatl, Exterior1st, Exterior2nd, MasVnrType, ExterQual, ExterCond, Foundation, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, Heating,  HeatingQC,  \n#   Electrical, KitchenQual, Functional, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PavedDrive, PoolQC, Fence, MiscFeature, MoSold, YrSold, SaleType, SaleCondition)\n\n\n# --- Categorical Features and Ordinal Feats.\names_all &lt;- ames_all |&gt;\n  mutate(OverallQual = factor(OverallQual)) |&gt;\n  mutate(OverallCond = factor(OverallCond))  # Check level orders 1, ..., 10 (BEST)\n\n\n\n\n# Count Numerical Feats.\n\n# BedroomabvGr left numerical (count); # Kitchens (count) left numerical \n# TotRmsAbvGrd numerical, Fireplaces, GarageCars, GarageArea, MiscVal\n# MasVnrArea Numeric\n```\n\n\nAfter 2 hours of reading and delivering, above in the code I created TotalBaths to get rid of the four (04) *.Bath counting predictors. I’m considering that half bath more is equally more or less expensive as a full one.\nI would lke to transform the YearRemodAdd to a simpler binary Remodelled Yes or No variable, similar to what I did with the new GarageNew column.\n\n\nCode\n```{r}\n#| label: New Binary Feats\n\n# --- Binary Features   \n# Does the installation exist? Existing and new Feats. added\n\n# Check if the actual instalations exist. I think  useful for Trees... \n\names_all &lt;- ames_all |&gt;\n  # CentralAir\n  mutate(CentralAir = if_else(CentralAir == \"N\", \"No\", \"Yes\")) |&gt;\n  mutate(CentralAir = fct_relevel(CentralAir, \"No\", \"Yes\"))|&gt;\n\n  # NEW IsRemodelled (it will replace YearRemodAdd)\n  mutate(IsRemodelled = if_else(YearRemodAdd - YearBuilt &gt; 0, \"Yes\", \"No\")) |&gt;\n  mutate(IsRemodelled = factor(IsRemodelled, levels = c(\"No\", \"Yes\"))) |&gt;\n  select(-YearRemodAdd) |&gt; # Bye YearRemodAdd\n\n  # NEW ExistPool\n  mutate(ExistPool = if_else(PoolArea == 0, \"No\", \"Yes\")) |&gt;\n  mutate(ExistPool = fct_relevel(ExistPool, \"No\", \"Yes\"))|&gt;\n\n  # NEW ExistGarage\n  mutate(ExistGarage = if_else(GarageArea == 0, \"No\", \"Yes\")) |&gt;\n  mutate(ExistGarage = fct_relevel(ExistGarage, \"No\", \"Yes\"))|&gt;\n\n  # NEW ExistBsmt\n  mutate(ExistBsmt = if_else(TotalBsmtSF == 0, \"No\", \"Yes\")) |&gt;\n  mutate(ExistBsmt = fct_relevel(ExistBsmt, \"No\", \"Yes\"))|&gt;\n\n  # NEW Exist2ndFloor\n  mutate(Exist2ndFloor = if_else(`2ndFlrSF` == 0, \"No\", \"Yes\")) |&gt;\n  select(-`2ndFlrSF`) |&gt; # Bye, bye... \n  mutate(Exist2ndFloor = fct_relevel(Exist2ndFloor, \"No\", \"Yes\")) |&gt;\n\n  # NEW ExistFireplace\n  mutate(ExistFireplace = if_else(Fireplaces == 0, \"No\", \"Yes\")) |&gt;\n  mutate(ExistFireplace = fct_relevel(ExistFireplace, \"No\", \"Yes\"))\n\nglimpse(ames_all)\n```\n\n\nRows: 2,919\nColumns: 74\n$ dataset           &lt;chr&gt; \"train\", \"train\", \"train\", \"train\", \"train\", \"train\"…\n$ MSSubClass        &lt;dbl&gt; 60, 20, 60, 70, 60, 50, 20, 60, 50, 190, 20, 60, 20,…\n$ MSZoning          &lt;chr&gt; \"RL\", \"RL\", \"RL\", \"RL\", \"RL\", \"RL\", \"RL\", \"RL\", \"RM\"…\n$ LotArea           &lt;dbl&gt; 8450, 9600, 11250, 9550, 14260, 14115, 10084, 10382,…\n$ Street            &lt;chr&gt; \"Pave\", \"Pave\", \"Pave\", \"Pave\", \"Pave\", \"Pave\", \"Pav…\n$ Alley             &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"Non…\n$ LotShape          &lt;chr&gt; \"Reg\", \"Reg\", \"IR1\", \"IR1\", \"IR1\", \"IR1\", \"Reg\", \"IR…\n$ LandContour       &lt;chr&gt; \"Lvl\", \"Lvl\", \"Lvl\", \"Lvl\", \"Lvl\", \"Lvl\", \"Lvl\", \"Lv…\n$ Utilities         &lt;chr&gt; \"AllPub\", \"AllPub\", \"AllPub\", \"AllPub\", \"AllPub\", \"A…\n$ LotConfig         &lt;chr&gt; \"Inside\", \"FR2\", \"Inside\", \"Corner\", \"FR2\", \"Inside\"…\n$ LandSlope         &lt;chr&gt; \"Gtl\", \"Gtl\", \"Gtl\", \"Gtl\", \"Gtl\", \"Gtl\", \"Gtl\", \"Gt…\n$ Neighborhood      &lt;chr&gt; \"CollgCr\", \"Veenker\", \"CollgCr\", \"Crawfor\", \"NoRidge…\n$ Condition1        &lt;chr&gt; \"Norm\", \"Feedr\", \"Norm\", \"Norm\", \"Norm\", \"Norm\", \"No…\n$ Condition2        &lt;chr&gt; \"Norm\", \"Norm\", \"Norm\", \"Norm\", \"Norm\", \"Norm\", \"Nor…\n$ BldgType          &lt;chr&gt; \"1Fam\", \"1Fam\", \"1Fam\", \"1Fam\", \"1Fam\", \"1Fam\", \"1Fa…\n$ HouseStyle        &lt;chr&gt; \"2Story\", \"1Story\", \"2Story\", \"2Story\", \"2Story\", \"1…\n$ OverallQual       &lt;fct&gt; 7, 6, 7, 7, 8, 5, 8, 7, 7, 5, 5, 9, 5, 7, 6, 7, 6, 4…\n$ OverallCond       &lt;fct&gt; 5, 8, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 8, 7, 5…\n$ YearBuilt         &lt;dbl&gt; 2003, 1976, 2001, 1915, 2000, 1993, 2004, 1973, 1931…\n$ RoofStyle         &lt;chr&gt; \"Gable\", \"Gable\", \"Gable\", \"Gable\", \"Gable\", \"Gable\"…\n$ RoofMatl          &lt;chr&gt; \"CompShg\", \"CompShg\", \"CompShg\", \"CompShg\", \"CompShg…\n$ Exterior1st       &lt;chr&gt; \"VinylSd\", \"MetalSd\", \"VinylSd\", \"Wd Sdng\", \"VinylSd…\n$ Exterior2nd       &lt;chr&gt; \"VinylSd\", \"MetalSd\", \"VinylSd\", \"Wd Shng\", \"VinylSd…\n$ MasVnrType        &lt;chr&gt; \"BrkFace\", \"None\", \"BrkFace\", \"None\", \"BrkFace\", \"No…\n$ MasVnrArea        &lt;dbl&gt; 196, 0, 162, 0, 350, 0, 186, 240, 0, 0, 0, 286, 0, 3…\n$ ExterQual         &lt;chr&gt; \"Gd\", \"TA\", \"Gd\", \"TA\", \"Gd\", \"TA\", \"Gd\", \"TA\", \"TA\"…\n$ ExterCond         &lt;chr&gt; \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\"…\n$ Foundation        &lt;chr&gt; \"PConc\", \"CBlock\", \"PConc\", \"BrkTil\", \"PConc\", \"Wood…\n$ BsmtQual          &lt;chr&gt; \"Gd\", \"Gd\", \"Gd\", \"TA\", \"Gd\", \"Gd\", \"Ex\", \"Gd\", \"TA\"…\n$ BsmtCond          &lt;chr&gt; \"TA\", \"TA\", \"TA\", \"Gd\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\"…\n$ BsmtExposure      &lt;chr&gt; \"No\", \"Gd\", \"Mn\", \"No\", \"Av\", \"No\", \"Av\", \"Mn\", \"No\"…\n$ BsmtFinType1      &lt;chr&gt; \"GLQ\", \"ALQ\", \"GLQ\", \"ALQ\", \"GLQ\", \"GLQ\", \"GLQ\", \"AL…\n$ BsmtFinType2      &lt;chr&gt; \"Unf\", \"Unf\", \"Unf\", \"Unf\", \"Unf\", \"Unf\", \"Unf\", \"BL…\n$ BsmtUnfSF         &lt;dbl&gt; 150, 284, 434, 540, 490, 64, 317, 216, 952, 140, 134…\n$ TotalBsmtSF       &lt;dbl&gt; 856, 1262, 920, 756, 1145, 796, 1686, 1107, 952, 991…\n$ Heating           &lt;chr&gt; \"GasA\", \"GasA\", \"GasA\", \"GasA\", \"GasA\", \"GasA\", \"Gas…\n$ HeatingQC         &lt;chr&gt; \"Ex\", \"Ex\", \"Ex\", \"Gd\", \"Ex\", \"Ex\", \"Ex\", \"Ex\", \"Gd\"…\n$ CentralAir        &lt;fct&gt; Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ Electrical        &lt;chr&gt; \"SBrkr\", \"SBrkr\", \"SBrkr\", \"SBrkr\", \"SBrkr\", \"SBrkr\"…\n$ GrLivArea         &lt;dbl&gt; 1710, 1262, 1786, 1717, 2198, 1362, 1694, 2090, 1774…\n$ BedroomAbvGr      &lt;dbl&gt; 3, 3, 3, 3, 4, 1, 3, 3, 2, 2, 3, 4, 2, 3, 2, 2, 2, 2…\n$ KitchenAbvGr      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2…\n$ KitchenQual       &lt;chr&gt; \"Gd\", \"TA\", \"Gd\", \"Gd\", \"Gd\", \"TA\", \"Gd\", \"TA\", \"TA\"…\n$ TotRmsAbvGrd      &lt;dbl&gt; 8, 6, 6, 7, 9, 5, 7, 7, 8, 5, 5, 11, 4, 7, 5, 5, 5, …\n$ Functional        &lt;chr&gt; \"Typ\", \"Typ\", \"Typ\", \"Typ\", \"Typ\", \"Typ\", \"Typ\", \"Ty…\n$ Fireplaces        &lt;dbl&gt; 0, 1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 2, 0, 1, 1, 0, 1, 0…\n$ FireplaceQu       &lt;chr&gt; \"None\", \"TA\", \"TA\", \"Gd\", \"TA\", \"None\", \"Gd\", \"TA\", …\n$ GarageType        &lt;chr&gt; \"Attchd\", \"Attchd\", \"Attchd\", \"Detchd\", \"Attchd\", \"A…\n$ GarageFinish      &lt;chr&gt; \"RFn\", \"RFn\", \"RFn\", \"Unf\", \"RFn\", \"Unf\", \"RFn\", \"RF…\n$ GarageCars        &lt;dbl&gt; 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 3, 1, 3, 1, 2, 2, 2…\n$ GarageArea        &lt;dbl&gt; 548, 460, 608, 642, 836, 480, 636, 484, 468, 205, 38…\n$ GarageQual        &lt;chr&gt; \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"Fa\"…\n$ GarageCond        &lt;chr&gt; \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\", \"TA\"…\n$ PavedDrive        &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y…\n$ PoolArea          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ PoolQC            &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"Non…\n$ Fence             &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"MnPrv\", \"No…\n$ MiscFeature       &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"Shed\", \"Non…\n$ MiscVal           &lt;dbl&gt; 0, 0, 0, 0, 0, 700, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ MoSold            &lt;dbl&gt; 2, 5, 9, 2, 12, 10, 8, 11, 4, 1, 2, 7, 9, 8, 5, 7, 3…\n$ YrSold            &lt;dbl&gt; 2008, 2007, 2008, 2006, 2008, 2009, 2007, 2009, 2008…\n$ SaleType          &lt;chr&gt; \"WD\", \"WD\", \"WD\", \"WD\", \"WD\", \"WD\", \"WD\", \"WD\", \"WD\"…\n$ SaleCondition     &lt;chr&gt; \"Normal\", \"Normal\", \"Normal\", \"Abnorml\", \"Normal\", \"…\n$ SalePrice         &lt;dbl&gt; 208500, 181500, 223500, 140000, 250000, 143000, 3070…\n$ GarageNew         &lt;fct&gt; No, No, No, No, No, No, No, No, No, No, No, No, No, …\n$ TotalBaths        &lt;dbl&gt; 3.5, 2.5, 3.5, 2.0, 3.5, 2.5, 3.0, 3.5, 2.0, 2.0, 2.…\n$ TotalInteriorArea &lt;dbl&gt; 2416, 2240, 2272, 1933, 2853, 2094, 3063, 2981, 1774…\n$ TotalExteriorArea &lt;dbl&gt; 61, 298, 42, 307, 276, 390, 312, 667, 295, 4, 0, 168…\n$ IsRemodelled      &lt;fct&gt; No, No, Yes, Yes, No, Yes, Yes, No, Yes, Yes, No, Ye…\n$ ExistPool         &lt;fct&gt; No, No, No, No, No, No, No, No, No, No, No, No, No, …\n$ ExistGarage       &lt;fct&gt; Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ ExistBsmt         &lt;fct&gt; Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Yes, Ye…\n$ Exist2ndFloor     &lt;fct&gt; Yes, No, Yes, Yes, Yes, Yes, No, Yes, Yes, No, No, Y…\n$ ExistFireplace    &lt;fct&gt; No, Yes, Yes, Yes, Yes, No, Yes, Yes, Yes, Yes, No, …"
  },
  {
    "objectID": "HousePrices.html#footnotes",
    "href": "HousePrices.html#footnotes",
    "title": "Prediction of House Prices in Ames",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTip: print a copy, make notes and study it. This is the first step to get into domain knowledge for Feature Engineering in the modelling phase.↩︎\nTip: write a function to quantify missing values depending on the language and labelling system used.↩︎\nTip: integer variables like calendar Years can be treated as categories for the analysis.↩︎\nTip: visualise a Logarithmic transformation like pressing an accordeon only from your right side.↩︎\nTip: visualise a Logarithmic transformation like pressing an accordeon only from your right side.↩︎"
  },
  {
    "objectID": "HousePrices.html#impute-missing-values",
    "href": "HousePrices.html#impute-missing-values",
    "title": "Prediction of House Prices in Ames",
    "section": "Impute Missing Values",
    "text": "Impute Missing Values\nFirst things first, read the full data description2. The manifest is available here. There you’ll find that for several columns missing values NA means actually “None”. The physical absence of a determined feature in a house is a category exposing the lack of such quality that can have a significant impact on the response SalePrice.2 Tip: print a copy, make notes and study it. This is the first step to get into domain knowledge for Feature Engineering in the modelling phase.\nTherefore, I will fill the empty NA fields of the indicated columns of both datasets with the string “None”.\n\n\nCode\n```{r}\n#| label: easy replace_na\n\ncols_NA_to_none &lt;- list(\n  Alley = \"None\",\n  BsmtQual = \"None\", BsmtCond = \"None\", BsmtExposure = \"None\", BsmtFinType1 = \"None\", BsmtFinType2 = \"None\", \n  FireplaceQu = \"None\", \n  GarageType = \"None\", GarageFinish = \"None\", GarageQual = \"None\", GarageCond = \"None\", \n  PoolQC = \"None\",\n  Fence = \"None\", \n  MiscFeature = \"None\")\n\names_all &lt;- ames_all |&gt;\n  replace_na(cols_NA_to_none)   \n```\n\n\nOne of the early and recurrent steps of the EDA is to check the completeness of data. Let’s search for missing values, after filling indicated fields3. For this case I wrote the function count_na() that generates the table displayed on the right margin.3 Tip: write a function to quantify missing values depending on the language and labelling system used.\n\n```{r}\n#| label: Counting NAs\n#| code-fold: false\n#| column: margin\n\n# Remaining NA count leaving out target SalePrice\names_all |&gt; \n  select(-SalePrice) |&gt;\n  count_na() |&gt;  \n  knitr::kable(caption = 'Ames dataset')\n```\n\n\n\nAmes dataset\n\n\nVariable\nNA_count\nPercent\n\n\n\n\nLotFrontage\n486\n16.65\n\n\nGarageYrBlt\n159\n5.45\n\n\nMasVnrType\n24\n0.82\n\n\nMasVnrArea\n23\n0.79\n\n\nMSZoning\n4\n0.14\n\n\nUtilities\n2\n0.07\n\n\nBsmtFullBath\n2\n0.07\n\n\nBsmtHalfBath\n2\n0.07\n\n\nFunctional\n2\n0.07\n\n\nExterior1st\n1\n0.03\n\n\nExterior2nd\n1\n0.03\n\n\nBsmtFinSF1\n1\n0.03\n\n\nBsmtFinSF2\n1\n0.03\n\n\nBsmtUnfSF\n1\n0.03\n\n\nTotalBsmtSF\n1\n0.03\n\n\nElectrical\n1\n0.03\n\n\nKitchenQual\n1\n0.03\n\n\nGarageCars\n1\n0.03\n\n\nGarageArea\n1\n0.03\n\n\nSaleType\n1\n0.03\n\n\n\n\nI will fill the remaining missing values as follow:\n\nThe LotFrontage column refers to the linear feet of street connected to the house. This feature is not well documented and the missing percentage related to other variables makes it unreliable, therefore, I will delete the feature.\nEverytime there is no garage, i.e., GarageType = \"None\", there is the corresponding missing value in Garage Year Built GarageYrBlt = NA. I will engineer a new feature called GarageNew with three ordinal categories: None, No, Yes. This based on the delta of YearBuilt - GarageYrBlt; I expect that given the house price, the algorithm will learn that “None” is worse than “No” and so on. Then I will remove the GarageYrBlt predictor.\nFor the rest of variables with a 1 % or less NA, I’ll calculate the median (if numerical) and the mode (if categorical) in order to fill them with it.\n\nHere’s my pipeline for the whole dataset:\n\n\nCode\n```{r}\n#| label: terminating NAs\n\n# \"replace_na_with_median\" is a custom function\n\names_all &lt;- ames_all |&gt;\n  mutate(LotFrontage = NULL) |&gt; # Removing LotFrontage\n  mutate(GarageNew = if_else(YearBuilt - GarageYrBlt &gt; 0, \"Yes\", \"No\")) |&gt; # New Feat.\n  replace_na(list(GarageNew = \"None\")) |&gt;\n  mutate(GarageNew = factor(GarageNew, levels = c(\"None\", \"No\", \"Yes\"))) |&gt; # 3 levels\n  mutate(GarageYrBlt = NULL) |&gt; # Removing old Feat.\n  mutate_if(is.numeric, replace_na_with_median)\n```\n\n\nLet’s get a list with the mode of each remaining columns containing missing values NA.\n\n\nCode\n```{r}\n#| label: Mode for NAs\n\n# Get the mode for reamaining columns with NAs:\n# \"find_mode()\" is a custom function.\n\n# Good, old-fashioned code: apply(ames_all, 2, find_mode)\n\nlist_na_mode &lt;- ames_all |&gt; \n  select(MasVnrType, MasVnrArea, MSZoning, Electrical, Utilities,   BsmtFullBath,   BsmtHalfBath,   Functional, Exterior1st,    Exterior2nd,    BsmtFinSF1, BsmtFinSF2, BsmtUnfSF,  TotalBsmtSF,    KitchenQual,GarageCars, GarageArea, SaleType) |&gt;\n  map(find_mode)\n\n# map returns a list \n\n# Replace with the created named-lists\names_all &lt;- ames_all |&gt;\n  replace_na(list_na_mode) \n\n# Sanity check of missing values:\nprint(\"Full Ames dataset (train and test)\")\names_all |&gt;\n  select(-SalePrice) |&gt;\n  count_na()\n```\n\n\n[1] \"Full Ames dataset (train and test)\"\n[1] \"No missing values (NA) found.\"\n\n\n“The data is complete!” Let’s think about predictors."
  },
  {
    "objectID": "HousePrices.html#simple-model-as-reference",
    "href": "HousePrices.html#simple-model-as-reference",
    "title": "Prediction of House Prices in Ames",
    "section": "Simple Model as Reference",
    "text": "Simple Model as Reference"
  },
  {
    "objectID": "HousePrices.html#model-selection",
    "href": "HousePrices.html#model-selection",
    "title": "Prediction of House Prices in Ames",
    "section": "Model Selection",
    "text": "Model Selection"
  },
  {
    "objectID": "HousePrices.html#reference-model",
    "href": "HousePrices.html#reference-model",
    "title": "Prediction of House Prices in Ames",
    "section": "Reference Model",
    "text": "Reference Model"
  }
]